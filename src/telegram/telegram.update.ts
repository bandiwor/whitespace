import {ConfigService} from "@nestjs/config";
import {Ctx, Message, On, Start, Update} from "nestjs-telegraf";
import {Scenes, Telegraf} from "telegraf";

import type {Contact} from "telegraf/types"
import {PrismaService} from "../prisma/prisma.service";
import cleanPhoneNumber from "../utils/cleanPhoneNumber";

interface Context extends Scenes.SceneContext {
}


@Update()
export default class TelegramUpdate extends Telegraf<Context> {
    constructor(private readonly configService: ConfigService, private readonly prismaService: PrismaService) {
        super(configService.get('TELEGRAM_BOT_TOKEN'));
    }


    @Start()
    async onStart(@Ctx() ctx: Context) {
        if (typeof ctx.message['text'] !== 'string') {
            await ctx.reply('–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–∫–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.');
            return;
        }
        const token = ctx.message['text'].split(' ').at(-1);

        const existsUserWithToken = await this.prismaService.user.findFirst({
            where: {
                telephoneVerificationCode: token,
                telegramId: null
            }
        })
        if (!existsUserWithToken) {
            await ctx.reply('‚ùå –¢–æ–∫–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.')
            return;
        }

        await this.prismaService.user.update({
            where: {
                id: existsUserWithToken.id
            },
            data: {
                telegramId: ctx.from.id.toString(),
                telephoneVerificationCode: null,
            }
        })

        await ctx.replyWithHTML(`‚úÖ–£—Å–ø–µ—à–Ω–æ\n\nüÜî<b>–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, </b>—á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π <b>–ö–û–ù–¢–ê–ö–¢</b> –¥–ª—è –≤–∞—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.`, {
            reply_markup: {
                one_time_keyboard: true,
                keyboard: [
                    [{text: '‚úâÔ∏è –û–¢–ü–†–ê–í–ò–¢–¨ –ö–û–ù–¢–ê–ö–¢ üì±', request_contact: true}]
                ],
                resize_keyboard: true
            }
        })
    }

    @On('contact')
    async onContact(@Ctx() ctx: Context, @Message('contact') contact: Contact) {
        const telephoneNumber = cleanPhoneNumber(contact.phone_number);

        if (!contact.user_id || contact.user_id !== ctx.from.id) {
            await ctx.replyWithHTML(`‚ùå –ü—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –≤–∞–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∏–º–µ–µ—Ç telegram id, –ª–∏–±–æ —ç—Ç–æ –Ω–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç.`)
            return;
        }

        const existsUser = await this.prismaService.user.findUnique({
            where: {
                telephone: telephoneNumber,
                telegramId: ctx.from.id.toString(),
                telephoneVerified: false
            }
        });

        if (!existsUser) {
            await ctx.replyWithHTML(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <code>+${telephoneNumber}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
            return;
        }

        await this.prismaService.user.update({
            where: {
                id: existsUser.id
            },
            data: {
                telephoneVerified: true,
            }
        })

        await ctx.replyWithHTML(`‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. <b>–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç.</b>`);
    }

    @On('text')
    async onText(@Ctx() ctx: Context) {
        await ctx.reply('–Ø –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç –º–µ–Ω—è ‚òπÔ∏è.\n–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∞–π—Ç–æ–º WhiteSpace-—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ, –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.')
    }
}
