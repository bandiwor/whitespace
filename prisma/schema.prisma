generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  LIMITED
  USER
  MODERATOR
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Session {
  id           String  @id @default(cuid())
  refreshToken String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  userAgent String
  device    String
  os        String
  browser   String
  ip        String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String @id @default(cuid())
  telephone    String @unique
  passwordHash String

  telegramId String? @unique

  telephoneVerified         Boolean @default(false)
  telephoneVerificationCode String?

  sessions Session[]
  role     Role      @default(USER)

  profile        Profile?
  profileCreated Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  firstName String
  lastName  String
  username  String? @unique

  statusText  String?
  dateOfBirth DateTime?
  gender      Gender

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentFriendships     FriendShip[] @relation("sentFriendships")
  receivedFriendships FriendShip[] @relation("receivedFriendships")
}

model FriendShip {
  sender     Profile @relation("sentFriendships", fields: [senderId], references: [id])
  senderId   Int
  receiver   Profile @relation("receivedFriendships", fields: [receiverId], references: [id])
  receiverId Int

  @@id([receiverId, senderId])
}
