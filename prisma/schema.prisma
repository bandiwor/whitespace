generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  LIMITED
  USER
  MODERATOR
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum ChatType {
  PRIVATE
  GROUP
  CHANNEL
}

enum MessageType {
  TEXT
  PHOTO
  AUDIO
  VOICE
  GIF
}

enum ParticipantRole {
  MEMBER
  ADMIN
  OWNER
}

model Session {
  id           String  @id @default(cuid())
  refreshToken String?

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  userAgent String
  device    String
  os        String
  browser   String
  ip        String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String @id @default(cuid())
  telephone    String @unique
  passwordHash String

  telegramId String? @unique

  telephoneVerified         Boolean @default(false)
  telephoneVerificationCode String?

  sessions Session[]
  role     Role      @default(USER)

  profile        Profile?
  profileCreated Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  firstName String
  lastName  String
  username  String? @unique

  statusText  String?
  dateOfBirth DateTime?
  gender      Gender
  avatarUrl   String?

  lastSeenAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentFriendships     FriendShip[] @relation("sentFriendships")
  receivedFriendships FriendShip[] @relation("receivedFriendships")

  chatParticipant ChatParticipant[]
  message         Message[]
}

model FriendShip {
  sender     Profile @relation("sentFriendships", fields: [senderId], references: [id])
  senderId   Int
  receiver   Profile @relation("receivedFriendships", fields: [receiverId], references: [id])
  receiverId Int

  @@id([receiverId, senderId])
}

model Chat {
  id         String   @id @default(cuid())
  type       ChatType
  name       String? // Only for groups/channels
  chatAvatar String? // Only for groups/channels

  messages     Message[]
  participants ChatParticipant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatParticipant {
  id       String          @id @default(cuid())
  role     ParticipantRole @default(MEMBER) // Enum (MEMBER, ADMIN, OWNER)
  joinedAt DateTime        @default(now())

  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id])
  chatId    String
  chat      Chat    @relation(fields: [chatId], references: [id])
}

model Message {
  id        String      @id @default(cuid())
  type      MessageType
  content   String? // Optional for non-text messages
  photoUrl  String? // URL for photo
  caption   String? // Caption for photo
  audioUrl  String? // URL for audio message
  gifUrl    String? // URL for GIF
  createdAt DateTime    @default(now())

  chatId    String
  chat      Chat    @relation(fields: [chatId], references: [id])
  profileId Int
  profile   Profile @relation(fields: [profileId], references: [id])
}
